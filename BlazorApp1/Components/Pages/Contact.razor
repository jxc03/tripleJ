@page "/contact"
@inject ILogger<Contact> Logger
@inject IEmailService EmailService
@inject IConfiguration Configuration
@using System.ComponentModel.DataAnnotations
@using BlazorApp1.Components.Services

<PageTitle>Contact Us</PageTitle>

<h1>Contact Us</h1>
<p>
    Contact us below and we will get back to you as soon as possible!
</p>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css" rel="stylesheet">

@* Form with validation *@  
<EditForm Model="@contactModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit" FormName="ContactForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @* Name input *@
    <ValidationMessage For="@(() => contactModel.Name)" class="text-danger"/>
    <div class="input-group mb-3">
        <span class="input-group-text">
            <i class="bi bi-person"></i>
        </span>
        <div class="form-floating">
            <InputText id="name" 
                       class="form-control" 
                       @bind-Value="contactModel.Name"
                       disabled="@isSubmitting"/> 
            <label for="name"><i>Name</i></label>
        </div>
    </div>
    
    @* Email input *@
    <ValidationMessage For="@(() => contactModel.Email)" class="text-danger"/>
    <div class="input-group mb-3">
        <span class="input-group-text">
            <i class="bi bi-envelope"></i>
        </span>
        <div class="form-floating">
            <InputText id="email" 
                       type="email"
                       class="form-control" 
                       @bind-Value="contactModel.Email"
                       disabled="@isSubmitting"/> 
            <label for="email"><i>Email</i></label>
        </div>
    </div>
    
    @* Subject title input *@
    <ValidationMessage For="@(() => contactModel.Subject)" class="text-danger"/>
    <div class="input-group mb-3">
        <span class="input-group-text">
            <i class="bi bi-chat-dots"></i>
        </span>
        <div class="form-floating">
            <InputText id="subject" 
                       class="form-control" 
                       @bind-Value="contactModel.Subject"
                       disabled="@isSubmitting"/> 
            <label for="subject"><i>Subject</i></label>
        </div>
    </div>
    
    @* Message input *@
    <ValidationMessage For="@(() => contactModel.Message)" class="text-danger"/>
    <div class="input-group mb-3">
        <span class="input-group-text">
            <i class="bi bi-pencil-square"></i>
        </span>
        <div class="form-floating">
            <InputTextArea id="message" 
                           class="form-control" 
                           @bind-Value="contactModel.Message"
                           disabled="@isSubmitting"/> 
            <label for="message"><i>Message</i></label>
        </div>
    </div>
    
    @* Submit button *@
    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
        @if (isSubmitting)
        {
            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
            <span>Sending...</span>
        }
        else
        {
            <i class="bi bi-send me-2"></i>
            <span>Submit</span>
        }
    </button>
</EditForm>

@* Feedback message depending if valid or invalid *@
@if (!string.IsNullOrEmpty(feedbackMessage))
{
    <div class="alert @feedbackClass mt-3">@feedbackMessage</div>
}

@code 
{
    /// Holds the data entered by the user in the contact form
    [SupplyParameterFromForm]
    private ContactModel contactModel { get; set; } = new();

    /// Stores the feedback message displayed to the user after submission
    private string? feedbackMessage;

    /// Determines the CSS class for styling the feedback message (success or error)
    private string feedbackClass = "";
    
    /// Indicates whether the form is currently being submitted (for loading state)
    private bool isSubmitting = false;

    /// <summary>
    /// Handles successful form submission when all validation rules pass
    /// Sends the email and provides feedback to the user
    /// </summary>
    private async Task HandleValidSubmit()
    {
        // Set loading state to disable form and show spinner
        isSubmitting = true;
        
        // Log the start of submission process
        Logger.LogInformation("Starting form submission for contact from {Name} ({Email})", 
            contactModel.Name, contactModel.Email);
        
        try
        {
            // Get the recipient email from configuration (your business email)
            var recipientEmail = Configuration["EmailSettings:SenderEmail"];
            
            // Log email sending attempt
            Logger.LogInformation("Attempting to send email to {RecipientEmail} with subject: {Subject}", 
                recipientEmail, contactModel.Subject);
            
            // Send the email using the email service
            var emailSent = await EmailService.SendEmailAsync(
                recipientEmail!,
                contactModel.Subject!,
                contactModel.Name!,
                contactModel.Email!,
                contactModel.Message!
            );
            
            if (emailSent)
            {
                // Success if email was sent
                feedbackMessage = "✅ Your message has been sent successfully! We'll get back to you soon.";
                feedbackClass = "alert-success";
                
                // Log successful submission
                Logger.LogInformation("Contact form submitted successfully. Name: {Name}, Email: {Email}, Subject: {Subject}", 
                    contactModel.Name, contactModel.Email, contactModel.Subject);
                
                // Clear the form after successful submission
                contactModel = new ContactModel();
            }
            else
            {
                // Email sending failed
                feedbackMessage = "⚠️ There was an issue sending your message. Please try again later or contact us directly.";
                feedbackClass = "alert-warning";
                
                // Log the failure
                Logger.LogWarning("Email sending failed for contact form submission from {Email}", contactModel.Email);
            }
        }
        catch (Exception ex)
        {
            // Unexpected error occurred
            feedbackMessage = "❌ An error occurred while sending your message. Please try again later.";
            feedbackClass = "alert-danger";
            
            // Log the exception
            Logger.LogError(ex, "Exception occurred during contact form submission");
        }
        finally
        {
            // Reset loading state
            isSubmitting = false;
        }
    }

    /// <summary>
    /// Handles invalid form submission when validation fails
    /// </summary>
    private void HandleInvalidSubmit()
    {
        feedbackMessage = "❌ Please fill in all required fields correctly.";
        feedbackClass = "alert-danger";
        
        // Log validation failure with details about which fields failed
        Logger.LogWarning("Form validation failed. Name: {Name}, Email: {Email}, Subject: {Subject}, Message Length: {MessageLength}",
            contactModel.Name ?? "null", 
            contactModel.Email ?? "null", 
            contactModel.Subject ?? "null",
            contactModel.Message?.Length ?? 0);
    }

    /// <summary>
    /// Represents the data submitted through the contact form with validation
    /// </summary>
    public class ContactModel
    {
        [Required(ErrorMessage = "Please enter your name")]
        [StringLength(50, ErrorMessage = "Name cannot exceed 50 characters")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "Please enter your email address")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string? Email { get; set; }

        [Required(ErrorMessage = "Please enter a subject title")]
        [StringLength(50, ErrorMessage = "Subject title cannot exceed 50 characters")]
        public string? Subject { get; set; }

        [Required(ErrorMessage = "Please enter a message")]
        [MinLength(10, ErrorMessage = "Message must be at least 10 characters long")]
        public string? Message { get; set; }
    }
}